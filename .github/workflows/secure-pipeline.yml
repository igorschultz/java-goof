name: java-goof image build and deployment for GKE

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'    

permissions: write-all

jobs:
  build-todolist-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: todolist-goof

    env:
      GITHUB_SHA: ${{ github.sha }}
        
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v2

      - name: Build
        uses: docker/build-push-action@v2
        with:
          load: true
          context: todolist-goof
          push: false

      - name: Docker build & tag image
        run: |
          docker build --platform=linux/amd64 -t ${{ secrets.CONTAINER_REPO }}:${{ env.GITHUB_SHA }} -t ${{ secrets.CONTAINER_REPO }}:${{ env.GITHUB_SHA }} .
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}   

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        id: install 
      
      - name: Scan Container Image with CrowdStrike
        uses: CrowdStrike/container-image-scan-action@main
        with:
          container_repository: ${{ secrets.CONTAINER_REPO }}
          container_tag: ${{ env.GITHUB_SHA }}
          crowdstrike_region: us-1
          crowdstrike_score: 500000
          retry_count: 30
        env:
          FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
          FALCON_CLIENT_ID: ${{ secrets.FALCON_CLIENT_ID }}
          JSON_REPORT: /tmp/report.json

      - name: Patch Container Image with Falcon Sensor
        uses: crowdstrike/falconutil-action@v1.0.0
        with:
          falcon_client_id: ${{ secrets.FALCON_CLIENT_ID }}
          falcon_region: 'us-1'
          source_image_uri: '${{ secrets.CONTAINER_REPO }}:${{ env.GITHUB_SHA }}'
          target_image_uri: '${{ secrets.CONTAINER_REPO }}:patched'
          cid: '${{ secrets.FALCON_CID }}'
          falconctl_opts: '--tags=fargate'
          image_pull_policy: IfNotPresent
        env:
          FALCON_CLIENT_SECRET: '${{ secrets.FALCON_CLIENT_SECRET }}'

      - name: Download task definition JSON file
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINITION_ARN }} --region ${{ secrets.AWS_REGION }} --query 'taskDefinition' > $GITHUB_WORKSPACE/task-definition.json

      - name: Render Amazon ECS task definition
        id: render-java-goof-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: $GITHUB_WORKSPACE/task-definition.json
          container-name: java-goof
          image: ${{ secrets.CONTAINER_REPO }}:patched

      - name: Register Task Definition to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-java-goof-container.outputs.task-definition }}
      
      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: igors-ecs-fargate-service
          template: ecs-fargate-java-goof.yaml
          parameter-overrides: "TaskDefinitionArn=${{ steps.render-java-goof-container.outputs.task-definition }},MyIpAddress=${{ secrets.MY_IP}},ExistingECSCluster=${{ secrets.ECS_CLUSTER}}"
    
      - name: Tag & Push docker image
        run: |
          docker push ${{ secrets.CONTAINER_REPO }}:patched



